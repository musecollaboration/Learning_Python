
# ? Операции над множествами


# ? Добавление элемента метод .add()
# Позволяет добавить новый элемент в множество.
# Метод оказывает изменение на состояние самого множества без присвоения.
# * Если вы пытаетесь добавить элемент, который уже существует в множестве, ничего не произойдет и ошибок никаких не будет.

a = {54, 32, 54, 3, 4, 2}
a.add(9)
print(a)  # {32, 2, 3, 4, 54, 9}

a.add(4)
print(a)        # {32, 2, 3, 4, 54, 9}
a.add('hello')  # {32, 2, 3, 4, 'hello', 54, 9}
print(a)

print('-'*15)

# ? Добавление элемента метод .update()
# Позволяет добавить сразу несколько элементов.
# Метод .update() может принимать произвольное количество любых объектов, поддерживающий итерацию по своим элементам.
# * Это могут быть списки, кортежи, другое множество и т.д.
# * Дублирующие элементы последовательностей игнорируются, само множество после вызова меняется

a = {54, 32, 54, 3, 4, 2}
a.update([5, 6, 7])
print(a)              # {32, 2, 3, 4, 5, 54, 6, 7}

a.update('hello')     # {2, 3, 4, 'o', 'e', 32, 'h', 54, 'l'}
print(a)

a = {54, 32, 54, 3, 4, 2}
a.update(range(5, 10))
print(a)              # {2, 3, 4, 5, 6, 7, 8, 9, 32, 54}

a = {54, 32, 54, 3, 4, 2}
a.update({4, 5, 6})
print(a)              # {32, 2, 3, 4, 5, 54, 6}

print('-'*15)

# ? Удаление элементов .discard()
a = {54, 32, 54, 3, 4, 2}
a.discard(4)
print(a)      # {32, 2, 3, 54}


# ? Удаление элементов .remove()
# Если указать элемент, который отсутствует в множестве, возникнет ошибка
a = {54, 32, 54, 3, 4, 2}
a.remove(4)
print(a)


# ? .pop()
# Вернет произвольный элемент из множества, а затем удалит его. При попытке вызвать метод у пустого множества возникнет ошибка.
a = {'mention', 'soup', 'tradition'}
print(a)
# {'soup', 'tradition', 'mention'}

remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')
# Удалили soup, теперь a={'tradition', 'mention'}

remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')
# Удалили tradition, теперь a={'mention'}

remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')
# Удалили mention, теперь a=set()


# ? .clear()
# Очищает все множество от его элементов, тем самым происходит полная очистка. В итоге после вызова метода .clear() ваша переменная будет ссылаться на пустое множество
a = {1, 2, 3}
print(a)       # {1, 2, 3}
a.clear()
print(a)       # set()


# ? .copy()
# ? Копирует элементы оригинального множества в новое множество.
# При этом вы можете сохранить новое множество в отдельную переменную и, вызвав функцию id,  вы увидите, что перед вами совершенно новый объект
a = {1, 2, 3}
print(a, id(a))   # {1, 2, 3} 2622775924256
b = a.copy()
print(b, id(b))   # {1, 2, 3} 2622775925824
