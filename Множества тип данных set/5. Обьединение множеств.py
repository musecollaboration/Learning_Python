# https://stepik.org/lesson/779028/step/4?auth=login&unit=781552

# ? Обьединение множеств

# ? Объединение ( от английского union) двух или более множеств объединит в себе все элементы, принадлежащие любому из указанных множеств. В математике объединение множеств A и В обозначается так A∪B

# Если вновь рассмотреть социальные сети, то при помощи объединения вы можете узнать общее количество друзей, которое имеется у вас и другого пользователя.
# За кружочек слева А мы можем обозначить множества ваших друзей, за кружок справа B - множество друзей другого пользователя.

a = {4, 3, 2, 1}
b = {3, 4, 5, 6, 7}
c = {10, 11, 12}
print(a | b)      # {1, 2, 3, 4, 5, 6, 7}
print(a)          # {1, 2, 3, 4}
# * Чтобы изменить множество нужно
a |= b
print(a)          # {1, 2, 3, 4, 5, 6, 7}

print('-'*15)


# # ? .union()
# Позволяет выполнить операцию объединения.
# * Может принимать произвольное количество любых объектов, поддерживающих итерацию по своим элементам.
# Это могут быть списки, кортежи, другое множество и т.д.
# Дублирующие элементы последовательностей игнорируются.
# Результатом вызова метода будет новое множество, или, другими словами, новый объект множества.
# * Метод не изменяет значения того множества, у которого метод вызывался
set_str = {'car', 'soup', 'bus'}
set_num = {1, 2, 3}
my_list = [True, 101, 'hello', 'soup', 2]
new_set = set_str.union(set_num)
print(set_str)       # {'soup', 'car', 'bus'}
print(new_set)       # {'car', 1, 'soup', 2, 3, 'bus'}

print('-'*15)

new_set_2 = set_num.union(my_list)
print(set_num)       # {1, 2, 3}
print(new_set_2)     # {1, 2, 3, 101, 'soup', 'hello'}

print('-'*15)

print(set_num.union('abcd', (2, 3, 4, 5)))
# {'b', 1, 2, 3, 'a', 'c', 4, 5, 'd'}

print('-'*15)

print(set_str.union(set_num, range(5)))
# {0, 1, 2, 3, 4, 'car', 'bus', 'soup'}

print('-'*15)

# * Чтобы изменить множество нужно
a = {4, 3, 2, 1}
b = {3, 4, 5, 6, 7}
c = {10, 11, 12}

a = a.union(b)
print(a)       # {1, 2, 3, 4, 5, 6, 7}


# ? .update()
# ! дописать!
